{"ast":null,"code":"var _jsxFileName = \"/Users/antonn/Documents/develop/todo/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoItem } from './TodoItem';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { CreateTodoButton } from './CreateTodoButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst defaultTodos = [{\n  text: 'Cortar cebolla',\n  completed: false\n}, {\n  text: 'Tomar el curso de intro a React',\n  completed: false\n}, {\n  text: 'Llorar',\n  completed: true\n}];\n\nfunction useLocalStorage(itemName, initialValue) {\n  _s();\n\n  const localStorageItem = localStorage.getItem(itemName);\n  let parsedItem;\n\n  if (!localStorageItem) {\n    localStorage.setItem(itemName, JSON.stringify(initialValue));\n    parsedItem = initialValue;\n  } else {\n    parsedItem = JSON.parse(localStorageItem);\n  }\n\n  const [item, setItem] = useState(parsedItem);\n\n  const saveItem = newItem => {\n    const stringifiedItem = JSON.stringify(newItem);\n    localStorage.setItem(itemName, stringifiedItem);\n    setItem(newItem);\n  };\n\n  return [item, saveItem];\n}\n\n_s(useLocalStorage, \"B/C+yLGYasz+SPGAkvc/DI3mWM8=\");\n\nfunction App() {\n  _s2();\n\n  const [todos, saveTodos] = useLocalStorage('TODOS_V1', []);\n  const [search, setSearch] = useState('');\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length; //Con esto filtraremos nuestros todos\n\n  let searchedTodos = [];\n\n  if (!search.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = search.toLowerCase();\n      return todoText.includes(searchText);\n    });\n  } //Esta funcion buscara que texto coincide con el texto buscado \n\n\n  const completeTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos[todoIndex].completed = true;\n    saveTodos(newTodos);\n  }; //Esta funcion replica la anterior pero borrando todos\n\n\n  const deleteTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1);\n    saveTodos(newTodos);\n  };\n\n  useEffect(() => {\n    console.log('use effect');\n  }, [totalTodos]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoCounter, {\n      total: totalTodos,\n      completed: completedTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(TodoSearch, {\n      search: search,\n      setSearch: setSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(TodoList, {\n      children: searchedTodos.map(todo => /*#__PURE__*/_jsxDEV(TodoItem, {\n        text: todo.text,\n        completed: todo.completed,\n        onComplete: () => completeTodo(todo.text),\n        onDelete: () => deleteTodo(todo.text)\n      }, todo.text, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(CreateTodoButton, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(App, \"om+UaufdzvFS7NKCGm/v9pIm4kY=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/antonn/Documents/develop/todo/src/App.js"],"names":["React","useState","useEffect","TodoCounter","TodoItem","TodoSearch","TodoList","CreateTodoButton","defaultTodos","text","completed","useLocalStorage","itemName","initialValue","localStorageItem","localStorage","getItem","parsedItem","setItem","JSON","stringify","parse","item","saveItem","newItem","stringifiedItem","App","todos","saveTodos","search","setSearch","completedTodos","filter","todo","length","totalTodos","searchedTodos","todoText","toLowerCase","searchText","includes","completeTodo","todoIndex","findIndex","newTodos","deleteTodo","splice","console","log","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { TodoCounter } from './TodoCounter';\nimport { TodoItem } from './TodoItem';\nimport { TodoSearch } from './TodoSearch';\nimport { TodoList } from './TodoList';\nimport { CreateTodoButton } from './CreateTodoButton';\n\n\n\nconst defaultTodos = [\n  { text: 'Cortar cebolla', completed: false},\n  { text: 'Tomar el curso de intro a React', completed: false},\n  { text: 'Llorar', completed: true},\n  ] \n\n\n  function useLocalStorage(itemName, initialValue) {\n    const  localStorageItem = localStorage.getItem(itemName);\n    let parsedItem;\n    \n\n    if (!localStorageItem) {\n    localStorage.setItem(itemName, JSON.stringify(initialValue));\n    parsedItem = initialValue;\n    } else {\n    parsedItem = JSON.parse( localStorageItem );\n    }\n\n\n    const [item, setItem] = useState(parsedItem)\n\n\n    const saveItem = (newItem) => {\n      const stringifiedItem = JSON.stringify(newItem);\n      localStorage.setItem(itemName, stringifiedItem);\n      setItem(newItem);\n    };\n\n    return [\n      item,\n      saveItem,\n    ];\n  \n  }\n\nfunction App() {\n\n  const [todos, saveTodos] = useLocalStorage('TODOS_V1', []);\n\n\n  const [search, setSearch] = useState('');\n  const completedTodos = todos.filter( todo => !!todo.completed).length;\n  const totalTodos = todos.length;\n\n\n//Con esto filtraremos nuestros todos\n  let searchedTodos = [];\n\n  if (!search.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = search.toLowerCase();\n      return todoText.includes(searchText);\n\n    })\n  }\n\n  \n\n\n  //Esta funcion buscara que texto coincide con el texto buscado \n  const completeTodo = (text) => {\n      const todoIndex = todos.findIndex(todo => todo.text === text);\n      const newTodos = [...todos];\n      newTodos[todoIndex].completed = true;\n      saveTodos(newTodos);\n  };\n\n  //Esta funcion replica la anterior pero borrando todos\n  const deleteTodo = (text) => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1);\n    saveTodos(newTodos);\n};\n\n\n\n  useEffect(() => {\n    console.log('use effect');\n\n    }, [totalTodos]);\n\n  return (\n  <>\n    <TodoCounter \n      total={ totalTodos}\n      completed={ completedTodos }\n    />\n    <TodoSearch\n      search={search}\n      setSearch={setSearch}\n    />\n    \n      \n    <TodoList>\n        { searchedTodos.map(todo => (\n        <TodoItem \n        key={todo.text}\n          text={todo.text}\n          completed={todo.completed}\n          onComplete= { () => completeTodo(todo.text)}\n          onDelete= { () => deleteTodo(todo.text)}\n          />\n        ))}\n    </TodoList>\n    <CreateTodoButton />\n      \n      \n  </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}