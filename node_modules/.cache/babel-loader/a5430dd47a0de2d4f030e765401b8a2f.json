{"ast":null,"code":"var _jsxFileName = \"/Users/antonn/Documents/develop/todo/src/TodoContext/index.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useLocalStorage } from \"./useLocalStorage\"; //Aqui hay dos componentes, todoContext.provider (para envolver la app) y .consumer (cuando necesitemos la info)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContext = /*#__PURE__*/React.createContext(); //Creamos un puente para compartir la info\n\nfunction TodoProvider(props) {\n  _s();\n\n  const {\n    item: todos,\n    //Para renombrar\n    saveItem: saveTodos,\n    loading,\n    error\n  } = useLocalStorage(\"todos_v1\", []);\n  const [searchValue, setSearchValue] = React.useState(\"\");\n  const [openModal, setOpenModal] = React.useState(false); // Cada vez que cambien los todos se realizará la cuenta \"!!\" si es true\n\n  const completedTodos = todos.filter(todo => !!todo.completed).length;\n  const totalTodos = todos.length;\n  let searchedTodos = [];\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter(todo => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      return todoText.includes(searchText);\n    });\n  } //TODO state\n\n\n  const addTodo = text => {\n    const newTodos = [...todos];\n    newTodos.push({\n      completed: false,\n      text: text\n    });\n    saveTodos(newTodos); // todos[todoIndex] = {text: todos[todoIndex].text, completed:true}\n  };\n\n  const completeTodo = text => {\n    //Recibe el identificador del todo\n    const todoIndex = todos.findIndex(todo => todo.text === text); //Compara los todos con el texto que recibimos\n    //Creamos una nueva lista con los cambios hechos para que se actualice\n\n    const newTodos = [...todos]; //Primero se le ponen todos los que tenia antes\n\n    newTodos[todoIndex].completed = true;\n    saveTodos(newTodos); // todos[todoIndex] = {text: todos[todoIndex].text, completed:true}\n  };\n\n  const unCompleteTodo = text => {\n    const todoIndex = todos.findIndex(todo => todo.text === text);\n    const newTodos = [...todos];\n    newTodos[todoIndex].completed = false;\n    saveTodos(newTodos);\n  };\n\n  const deleteTodo = text => {\n    //Recibe el identificador del todo\n    const todoIndex = todos.findIndex(todo => todo.text === text); //Compara los todos con el texto que recibimos\n    //Creamos una nueva lista con los cambios hechos para que se actualice\n\n    const newTodos = [...todos]; //Primero se le ponen todos los que tenia antes\n\n    newTodos.splice(todoIndex, 1);\n    saveTodos(newTodos); // todos[todoIndex] = {text: todos[todoIndex].text, completed:true}\n  };\n\n  return (\n    /*#__PURE__*/\n    //envuelve toda la app, tiene por dentro cualquier componente donde llamemos al consumer\n    _jsxDEV(TodoContext.Provider, {\n      value: {\n        error,\n        loading,\n        totalTodos,\n        completedTodos,\n        searchValue,\n        setSearchValue,\n        searchedTodos,\n        completeTodo,\n        addTodo,\n        unCompleteTodo,\n        deleteTodo,\n        openModal,\n        setOpenModal\n      },\n      children: props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(TodoProvider, \"oCV5q4eQwUHiKPIZl0wZ3myb7x8=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = TodoProvider;\nexport { TodoContext, TodoProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoProvider\");","map":{"version":3,"sources":["/Users/antonn/Documents/develop/todo/src/TodoContext/index.js"],"names":["React","useLocalStorage","TodoContext","createContext","TodoProvider","props","item","todos","saveItem","saveTodos","loading","error","searchValue","setSearchValue","useState","openModal","setOpenModal","completedTodos","filter","todo","completed","length","totalTodos","searchedTodos","todoText","text","toLowerCase","searchText","includes","addTodo","newTodos","push","completeTodo","todoIndex","findIndex","unCompleteTodo","deleteTodo","splice","children"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useLocalStorage } from \"./useLocalStorage\";\n//Aqui hay dos componentes, todoContext.provider (para envolver la app) y .consumer (cuando necesitemos la info)\nconst TodoContext = React.createContext();\n\n//Creamos un puente para compartir la info\nfunction TodoProvider(props) {\n  const {\n    item: todos, //Para renombrar\n    saveItem: saveTodos,\n    loading,\n    error,\n  } = useLocalStorage(\"todos_v1\", []);\n\n  const [searchValue, setSearchValue] = React.useState(\"\");\n  const [openModal, setOpenModal] = React.useState(false);\n\n  // Cada vez que cambien los todos se realizará la cuenta \"!!\" si es true\n  const completedTodos = todos.filter((todo) => !!todo.completed).length;\n  const totalTodos = todos.length;\n\n  let searchedTodos = [];\n\n  if (!searchValue.length >= 1) {\n    searchedTodos = todos;\n  } else {\n    searchedTodos = todos.filter((todo) => {\n      const todoText = todo.text.toLowerCase();\n      const searchText = searchValue.toLowerCase();\n      return todoText.includes(searchText);\n    });\n  }\n\n  //TODO state\n\n  const addTodo = (text) => {\n    const newTodos = [...todos];\n\n    newTodos.push({\n      completed: false,\n      text: text,\n    });\n\n    saveTodos(newTodos);\n    // todos[todoIndex] = {text: todos[todoIndex].text, completed:true}\n  };\n  const completeTodo = (text) => {\n    //Recibe el identificador del todo\n    const todoIndex = todos.findIndex((todo) => todo.text === text); //Compara los todos con el texto que recibimos\n\n    //Creamos una nueva lista con los cambios hechos para que se actualice\n    const newTodos = [...todos]; //Primero se le ponen todos los que tenia antes\n    newTodos[todoIndex].completed = true;\n    saveTodos(newTodos);\n    // todos[todoIndex] = {text: todos[todoIndex].text, completed:true}\n  };\n\n  const unCompleteTodo = (text) => {\n    const todoIndex = todos.findIndex((todo) => todo.text === text);\n\n    const newTodos = [...todos];\n    newTodos[todoIndex].completed = false;\n    saveTodos(newTodos);\n  };\n\n  const deleteTodo = (text) => {\n    //Recibe el identificador del todo\n    const todoIndex = todos.findIndex((todo) => todo.text === text); //Compara los todos con el texto que recibimos\n\n    //Creamos una nueva lista con los cambios hechos para que se actualice\n    const newTodos = [...todos]; //Primero se le ponen todos los que tenia antes\n    newTodos.splice(todoIndex, 1);\n    saveTodos(newTodos);\n    // todos[todoIndex] = {text: todos[todoIndex].text, completed:true}\n  };\n\n  return (\n    //envuelve toda la app, tiene por dentro cualquier componente donde llamemos al consumer\n    <TodoContext.Provider\n      value={{\n        error,\n        loading,\n        totalTodos,\n        completedTodos,\n        searchValue,\n        setSearchValue,\n        searchedTodos,\n        completeTodo,\n        addTodo,\n        unCompleteTodo,\n        deleteTodo,\n        openModal,\n        setOpenModal,\n      }}\n    >\n      {props.children}\n    </TodoContext.Provider>\n  );\n}\n\nexport { TodoContext, TodoProvider };\n"]},"metadata":{},"sourceType":"module"}